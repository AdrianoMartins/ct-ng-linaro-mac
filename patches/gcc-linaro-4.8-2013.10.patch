diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/Makefile.in gcc-linaro-4.8-2013.10/gcc/Makefile.in
--- gcc-linaro-4.8-2013.10-ori/gcc/Makefile.in	2013-08-14 13:17:35.000000000 +0200
+++ gcc-linaro-4.8-2013.10/gcc/Makefile.in	2014-08-31 10:29:42.000000000 +0200
@@ -223,17 +223,8 @@ HOST_LIBS = @HOST_LIBS@
 # The name of the compiler to use.
 COMPILER = $(CXX)
 COMPILER_FLAGS = $(CXXFLAGS)
-# If HOST_LIBS is set, then the user is controlling the libraries to
-# link against.  In that case, link with $(CC) so that the -lstdc++
-# library is not introduced.  If HOST_LIBS is not set, link with
-# $(CXX) to pick up -lstdc++.
-ifeq ($(HOST_LIBS),)
 LINKER = $(CXX)
 LINKER_FLAGS = $(CXXFLAGS)
-else
-LINKER = $(CC)
-LINKER_FLAGS = $(CFLAGS)
-endif
 
 # -------------------------------------------
 # Programs which operate on the build machine
diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/config/arm/t-mlibs gcc-linaro-4.8-2013.10/gcc/config/arm/t-mlibs
--- gcc-linaro-4.8-2013.10-ori/gcc/config/arm/t-mlibs	1970-01-01 01:00:00.000000000 +0100
+++ gcc-linaro-4.8-2013.10/gcc/config/arm/t-mlibs	2014-08-31 10:30:00.000000000 +0200
@@ -0,0 +1,21 @@
+# A set of predefined MULTILIB for different ARM targets.
+# Through the configure option --with-multilib-list, user can customize the
+# final MULTILIB implementation.
+
+comma := ,
+space :=
+space +=
+
+MULTILIB_OPTIONS   = marm
+MULTILIB_DIRNAMES  = arm
+MULTILIB_OPTIONS  += march=armv4t
+MULTILIB_DIRNAMES += armv4t
+MULTILIB_OPTIONS  += mfloat-abi=soft
+MULTILIB_DIRNAMES += soft
+
+MULTILIB_EXCEPTIONS =
+
+MULTILIB_REQUIRED = marm/march=armv4t/mfloat-abi=soft
+
+MULTILIB_OSDIRNAMES = marm/march.armv4t/mfloat-abi.soft=!arm-linux-gnueabi
+
diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/config.gcc gcc-linaro-4.8-2013.10/gcc/config.gcc
--- gcc-linaro-4.8-2013.10-ori/gcc/config.gcc	2013-10-15 17:31:01.000000000 +0200
+++ gcc-linaro-4.8-2013.10/gcc/config.gcc	2014-08-31 10:30:00.000000000 +0200
@@ -878,7 +878,7 @@ arm*-*-linux-*)			# ARM GNU/Linux with E
 	    tm_defines="${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1"
 	    ;;
 	esac
-	tmake_file="${tmake_file} arm/t-arm arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi"
+	tmake_file="${tmake_file} arm/t-arm arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi arm/t-mlibs"
 	tm_file="$tm_file arm/bpabi.h arm/linux-eabi.h arm/aout.h vxworks-dummy.h arm/arm.h"
 	# Define multilib configuration for arm-linux-androideabi.
 	case ${target} in
@@ -908,7 +908,7 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*
 	case ${target} in
 	arm*-*-eabi*)
 	  tm_file="$tm_file newlib-stdint.h"
-	  tmake_file="${tmake_file} arm/t-bpabi"
+	  tmake_file="${tmake_file} arm/t-bpabi arm/t-mlibs"
 	  use_gcc_stdint=wrap
 	  ;;
 	arm*-*-rtems*)
diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/gcc.c gcc-linaro-4.8-2013.10/gcc/gcc.c
--- gcc-linaro-4.8-2013.10-ori/gcc/gcc.c	2013-06-06 08:53:02.000000000 +0200
+++ gcc-linaro-4.8-2013.10/gcc/gcc.c	2014-08-31 10:30:16.000000000 +0200
@@ -2227,7 +2227,7 @@ for_each_path (const struct path_prefix 
 	    }
 
 	  /* Now try the multiarch path.  */
-	  if (!skip_multi_dir
+	  if (!skip_multi_dir && !multi_dir
 	      && !pl->require_machine_suffix && multiarch_dir)
 	    {
 	      memcpy (path + len, multiarch_suffix, multiarch_len + 1);
@@ -2235,7 +2235,6 @@ for_each_path (const struct path_prefix 
 	      if (ret)
 		break;
 	    }
-
 	  /* Now try the base path.  */
 	  if (!pl->require_machine_suffix
 	      && !(pl->os_multilib ? skip_multi_os_dir : skip_multi_dir))
@@ -2263,6 +2262,16 @@ for_each_path (const struct path_prefix 
 	      if (ret)
 		break;
 	    }
+
+	  /* Now try the multiarch path.  */
+	  if (!skip_multi_dir
+	      && !pl->require_machine_suffix && multiarch_dir)
+	    {
+	      memcpy (path + len, multiarch_suffix, multiarch_len + 1);
+	      ret = callback (path, callback_info);
+	      if (ret)
+		break;
+	    }
 	}
       if (pl)
 	break;
@@ -6293,7 +6302,7 @@ main (int argc, char **argv)
   /* Unlock the stdio streams.  */
   unlock_std_streams ();
 
-  gcc_init_libintl ();
+  gcc_init_libintl_program (argv[0]);
 
   diagnostic_initialize (global_dc, 0);
 
@@ -7662,6 +7671,20 @@ set_multilib_dir (void)
 	    ++p;
 	}
 
+      if (first)
+	{
+	  if (this_path_len > 3 
+	      && this_path[0] == '.' 
+	      && this_path[1] == ':'
+	      && this_path[2] == ':')
+	    {
+	      char *new_multiarch_dir = XNEWVEC (char, this_path_len + 1);
+
+	      strncpy (new_multiarch_dir, this_path, this_path_len);
+	      new_multiarch_dir[this_path_len] = '\0';
+	      multiarch_dir = &new_multiarch_dir[3];
+	    }
+	}
       if (ok && first)
 	{
 	  if (this_path_len != 1
diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/incpath.c gcc-linaro-4.8-2013.10/gcc/incpath.c
--- gcc-linaro-4.8-2013.10-ori/gcc/incpath.c	2013-04-08 21:06:00.000000000 +0200
+++ gcc-linaro-4.8-2013.10/gcc/incpath.c	2014-08-31 10:30:16.000000000 +0200
@@ -130,7 +130,6 @@ add_standard_paths (const char *sysroot,
   const struct default_include *p;
   int relocated = cpp_relocated();
   size_t len;
-
   if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0)
     {
       /* Look for directories that start with the standard prefix.
@@ -148,20 +147,21 @@ add_standard_paths (const char *sysroot,
 	      if (!filename_ncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))
 		{
 		  char *str = concat (iprefix, p->fname + len, NULL);
-		  if (p->multilib == 1 && imultilib)
-		    str = reconcat (str, str, dir_separator_str,
-				    imultilib, NULL);
-		  else if (p->multilib == 2)
+		  if (p->multilib && imultilib)
+                    {
+		      str = reconcat (str, str, dir_separator_str, imultilib, NULL);
+		      add_path (str, SYSTEM, p->cxx_aware, false);
+		    }
+		  else
+		    add_path (str, SYSTEM, p->cxx_aware, false);
+
+		  if (p->multilib && imultiarch)
 		    {
-		      if (!imultiarch)
-			{
-			  free (str);
-			  continue;
-			}
+                      char *str = concat (iprefix, p->fname + len, NULL);
 		      str = reconcat (str, str, dir_separator_str,
 				      imultiarch, NULL);
+		      add_path (str, SYSTEM, p->cxx_aware, false);
 		    }
-		  add_path (str, SYSTEM, p->cxx_aware, false);
 		}
 	    }
 	}
@@ -171,7 +171,7 @@ add_standard_paths (const char *sysroot,
     {
       if (!p->cplusplus || cxx_stdinc)
 	{
-	  char *str;
+	  char *str, *str2;
 
 	  /* Should this directory start with the sysroot?  */
 	  if (sysroot && p->add_sysroot)
@@ -215,19 +215,20 @@ add_standard_paths (const char *sysroot,
 	  else
 	    str = update_path (p->fname, p->component);
 
-	  if (p->multilib == 1 && imultilib)
-	    str = reconcat (str, str, dir_separator_str, imultilib, NULL);
-	  else if (p->multilib == 2)
+	  str2 = xstrdup(str);
+	  if (p->multilib && imultilib)
 	    {
-	      if (!imultiarch)
-		{
-		  free (str);
-		  continue;
-		}
-	      str = reconcat (str, str, dir_separator_str, imultiarch, NULL);
+	      str = reconcat (str, str, dir_separator_str, imultilib, NULL);
+	      add_path (str, SYSTEM, p->cxx_aware, false);
 	    }
+	  else
+	    add_path (str, SYSTEM, p->cxx_aware, false);
 
-	  add_path (str, SYSTEM, p->cxx_aware, false);
+	  if (p->multilib && imultiarch)
+	    {
+	      str2 = reconcat (str2, str2, dir_separator_str, imultiarch, NULL);
+	      add_path (str2, SYSTEM, p->cxx_aware, false);
+	    }
 	}
     }
 }
diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/intl.c gcc-linaro-4.8-2013.10/gcc/intl.c
--- gcc-linaro-4.8-2013.10-ori/gcc/intl.c	2013-01-10 21:38:27.000000000 +0100
+++ gcc-linaro-4.8-2013.10/gcc/intl.c	2014-08-31 10:29:22.000000000 +0200
@@ -48,6 +48,14 @@ bool locale_utf8 = false;
 void
 gcc_init_libintl (void)
 {
+  gcc_init_libintl_program("gcc");
+}
+
+#define LIBINTL_RELATIVE_DIR "../share/locale"
+
+void
+gcc_init_libintl_program (const char * program_name)
+{
 #ifdef HAVE_LC_MESSAGES
   setlocale (LC_CTYPE, "");
   setlocale (LC_MESSAGES, "");
@@ -55,7 +63,32 @@ gcc_init_libintl (void)
   setlocale (LC_ALL, "");
 #endif
 
-  (void) bindtextdomain ("gcc", LOCALEDIR);
+  if (!access (LOCALEDIR, X_OK))
+    {
+      /* If LOCALEDIR exists, use LOCALEDIR. */
+      (void) bindtextdomain ("gcc", LOCALEDIR);
+    }
+  else
+    {
+      /* Try relative dir, i.e.  .../bin/../share/locale. */
+      int len1, len2;
+      char *prefix_dir, *locale_dir;
+      prefix_dir = make_relative_prefix(program_name,".",".");
+      len1 = strlen (prefix_dir);
+      len2 = strlen (LIBINTL_RELATIVE_DIR);
+      locale_dir = (char*)xmalloc (len1 + len2 + 1);
+      if (locale_dir != NULL)
+	{
+	  strcpy (locale_dir, prefix_dir);
+	  strcpy (locale_dir + len1, LIBINTL_RELATIVE_DIR);
+	  (void) bindtextdomain ("gcc", locale_dir);
+	}
+      else
+	(void) bindtextdomain ("gcc", LOCALEDIR);
+
+      free (prefix_dir);
+    }
+
   (void) textdomain ("gcc");
 
   /* Opening quotation mark.  */
diff -rupN gcc-linaro-4.8-2013.10-ori/gcc/intl.h gcc-linaro-4.8-2013.10/gcc/intl.h
--- gcc-linaro-4.8-2013.10-ori/gcc/intl.h	2013-06-06 08:53:02.000000000 +0200
+++ gcc-linaro-4.8-2013.10/gcc/intl.h	2014-08-31 10:29:22.000000000 +0200
@@ -30,6 +30,7 @@
 #include <libintl.h>
 extern void gcc_init_libintl (void);
 extern size_t gcc_gettext_width (const char *);
+extern void gcc_init_libintl_program (const char *);
 #else
 /* Stubs.  */
 # undef textdomain
